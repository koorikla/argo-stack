argocd-apps:
  enabled: true
  fullnameOverride: argocd-apps
  applications:
    # Argo can manage argo itself, thanks to its stateless nature we always have backwards compatability with helm disaster recovery is to fix and run helm upgrade --install argo helm/argo -n argo
    argo:
      namespace: argo
      project: infra
      sources:
      - repoURL: https://github.com/koorikla/argo-stack
        path: helm/argo
        targetRevision: main
      destination:
        server: https://kubernetes.default.svc
        namespace: argo
      syncPolicy:
        automated:
          prune: true
          selfHeal: true

    crossplane:
      namespace: argo
      project: infra
      sources:
      - repoURL: https://github.com/koorikla/argo-stack
        path: helm/crossplane
        targetRevision: main
      destination:
        server: https://kubernetes.default.svc
        namespace: crossplane-system
      syncPolicy:
        syncOptions:
        - CreateNamespace=true

    kargo:
      namespace: argo
      project: infra
      sources:
      - repoURL: https://github.com/koorikla/argo-stack
        path: helm/kargo
        targetRevision: main
      destination:
        server: https://kubernetes.default.svc
        namespace: kargo
      syncPolicy:
        syncOptions:
        - CreateNamespace=true

    workflow-components:
      namespace: argo
      project: demo
      sources:
      - repoURL: https://github.com/koorikla/argo-stack
        path: workflow-components
        targetRevision: main
        directory:
          recurse: true
      destination:
        server: https://kubernetes.default.svc
        namespace: argo

    any-manifest:
      namespace: argo
      project: demo
      sources:
      - repoURL: https://github.com/koorikla/argo-stack
        path: manifests
        targetRevision: main
        directory:
          recurse: true
      destination:
        server: https://kubernetes.default.svc
        namespace: default

    rollout-demo:
      namespace: argo
      project: demo
      sources:
      - repoURL: https://github.com/koorikla/argo-stack
        path: rollout-demo
        targetRevision: main
        directory:
          recurse: true
      destination:
        server: https://kubernetes.default.svc
        namespace: default

  projects:
    infra:
      namespace: argo
      finalizers:
      description: Infra Project
      sourceRepos:
      - '*'
      destinations:
      - namespace: '*'
        server: https://kubernetes.default.svc
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'

    demo:
      namespace: argo
      finalizers:
      description: Infra Project
      sourceRepos:
      - '*'
      destinations:
      - namespace: '*'
        server: https://kubernetes.default.svc
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'



argo-cd:
  enabled: true
  fullnameOverride: argo-cd
  global:
    domain: argocd.local  
  server:
    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        alb.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      ingressClassName: "nginx"
      https: false


argo-workflows:
  enabled: true
  fullnameOverride: argo-workflows
  authModes: ["server"]
  server:
    extraArgs:
    - --auth-mode=server
    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        alb.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      ingressClassName: "nginx"
      hosts:
        - argo-workflows.local


argo-events:
  enabled: true
  fullnameOverride: argo-events


argo-rollouts:
  enabled: true
  fullnameOverride: argo-rollouts
  dashboard:
    enabled: true
    ingress:
      enabled: true
      ingressClassName: "nginx"
      hosts:
        - argo-rollouts.local
      pathType: ImplementationSpecific
      paths:
        - /